"""
–¢–µ—Å—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è (–±–µ–∑ UI)
"""
import pytest
import allure
from pages.base_test import BaseTest


class TestChangePasswordStructure(BaseTest):
    """–¢–µ—Å—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ChangePasswordPage –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ UI"""
    
    @allure.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ ChangePasswordPage")
    def test_change_password_page_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        assert self.change_password_page is not None
        assert hasattr(self.change_password_page, 'CURRENT_PASSWORD_FIELD')
        assert hasattr(self.change_password_page, 'NEW_PASSWORD_FIELD')
        assert hasattr(self.change_password_page, 'CONFIRM_PASSWORD_FIELD')
        assert hasattr(self.change_password_page, 'SAVE_BUTTON')
        
        print("‚úÖ –û–±—ä–µ–∫—Ç ChangePasswordPage —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"üìã –õ–æ–∫–∞—Ç–æ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã: {len([attr for attr in dir(self.change_password_page) if attr.isupper()])}")
    
    @allure.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è")
    def test_change_password_page_methods(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        required_methods = [
            'open_change_password_page',
            'enter_current_password',
            'enter_new_password', 
            'enter_confirm_password',
            'click_save_button',
            'click_cancel_button',
            'change_password',
            'is_success_message_displayed',
            'is_error_message_displayed',
            'get_success_message_text',
            'get_error_message_text',
            'clear_all_fields'
        ]
        
        for method_name in required_methods:
            assert hasattr(self.change_password_page, method_name), \
                f"–ú–µ—Ç–æ–¥ {method_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ChangePasswordPage"
            assert callable(getattr(self.change_password_page, method_name)), \
                f"–ú–µ—Ç–æ–¥ {method_name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤—ã–∑—ã–≤–∞–µ–º—ã–º"
        
        print("‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã ChangePasswordPage –¥–æ—Å—Ç—É–ø–Ω—ã")
        print(f"üìã –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –º–µ—Ç–æ–¥–æ–≤: {len(required_methods)}")
    
    @allure.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞—Ç–æ—Ä–æ–≤")
    def test_change_password_page_locators(self):
        """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ª–æ–∫–∞—Ç–æ—Ä–æ–≤"""
        required_locators = [
            'CURRENT_PASSWORD_FIELD',
            'NEW_PASSWORD_FIELD',
            'CONFIRM_PASSWORD_FIELD',
            'SAVE_BUTTON',
            'CANCEL_BUTTON',
            'SUCCESS_MESSAGE',
            'ERROR_MESSAGE',
            'PASSWORD_STRENGTH_INDICATOR'
        ]
        
        for locator_name in required_locators:
            assert hasattr(self.change_password_page, locator_name), \
                f"–õ–æ–∫–∞—Ç–æ—Ä {locator_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ChangePasswordPage"
            
            locator = getattr(self.change_password_page, locator_name)
            assert isinstance(locator, tuple), \
                f"–õ–æ–∫–∞—Ç–æ—Ä {locator_name} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–º"
            assert len(locator) == 2, \
                f"–õ–æ–∫–∞—Ç–æ—Ä {locator_name} –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 2 —ç–ª–µ–º–µ–Ω—Ç–∞ (—Ç–∏–ø, –∑–Ω–∞—á–µ–Ω–∏–µ)"
        
        print("‚úÖ –í—Å–µ –ª–æ–∫–∞—Ç–æ—Ä—ã ChangePasswordPage –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        print(f"üìã –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ª–æ–∫–∞—Ç–æ—Ä–æ–≤: {len(required_locators)}")
    
    @allure.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    def test_basic_functionality(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ UI"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ UI
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç self –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
            result = self.change_password_page.enter_current_password("test")
            assert result is self.change_password_page
            
            result = self.change_password_page.enter_new_password("test")
            assert result is self.change_password_page
            
            result = self.change_password_page.enter_confirm_password("test")
            assert result is self.change_password_page
            
            print("‚úÖ –ú–µ—Ç–æ–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç self –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
            # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç—ã UI –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    
    @allure.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –æ—Ç BasePage")
    def test_inheritance_from_base_page(self):
        """–¢–µ—Å—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –æ—Ç BasePage"""
        from pages.base_page import BasePage
        
        assert isinstance(self.change_password_page, BasePage), \
            "ChangePasswordPage –¥–æ–ª–∂–µ–Ω –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç BasePage"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        base_methods = ['open_host', 'element_in_visible', 'element_in_clickable', 'element_in_localed']
        for method_name in base_methods:
            assert hasattr(self.change_password_page, method_name), \
                f"–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ {method_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        print("‚úÖ ChangePasswordPage –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç BasePage")

